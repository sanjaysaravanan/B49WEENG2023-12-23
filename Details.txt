
Topics:

  1. Authorization:
    authenticating individual APIs to give protection at the api level

      JWT: 

        Step 1: Whenever a user logs in, create a new token and send it in the login response
        Step 2: Validate in the incoming request to have the generated token in parameter or header
        Step 3: Frontend should store the generated token in local storage and pass it in the header or parameter

  Completing the users application with proper 
    authentication & authorization
  
  2. FSD Demo - Full Stack Development Demo

    Simple Instagram or Facebook application

    ** Think Twice before starting the Coding **

      Front-End -> Use AI ( ChatGPT 3.5 ) to generate codes
        HTML, CSS, Js, React, CSS Modules, Bootstrap, redux

        Pages:

          / --> all the posts from other users ( not the logged user )
            posts should be in proper dimensions
            and scroll to see other posts

          /profile-account --> Details about the logged in user
            Profile Pic, Id, email, phone, bio
            Also, give option to edit the details
          
          /peoples --> list all the users except the logged in user

          /peoples/:userId --> list the info and details of the particular user

          /my-posts --> list all the posts of an user 
            edit, delete any of his posts

          /login --> login form & link to register

          /register --> register form & a link to login

      Backend:
        NodeJS, Express, MongoDB, Mongoose, CORS, middlewares

        APIs:

          /login --> POST - Log-in a user into the system
            verify the user creds
 
          /register --> POST - Register a user into the system

          /users
            POST - Create a new user in the system
            GET - get all the users of the system
            /:id --> GET - get one single user of the system
            /:id --> PUT - update one single user of the system
            /:id --> DELETE - delete one single user of the system
            
          /posts
            POST --> create a new post
            GET --> get all the posts of the system
              not the posts of the user logged in
            /posts?userId=<userId> - GET - get the posts of the user
            /:postId - GET - get a single post of the system

      DB:

        ER --> Entity Relationship
          1. what are all the entities
          2. how are they related to each other

        Modelling or Schema :

          users:
            id
            username
            email
            isVerified
            profilepic
            phone
            bio
          
          posts: NoSQL
            id
            caption
            imageUrl
            likes
            userDetails: {
              id,
              username,
              profilepic,
            }
          
        SQL, NoSQL, 


Task:
  Understand the pre-development process of FSD

Next Session: 

  Will continue the developments on further pages & apis